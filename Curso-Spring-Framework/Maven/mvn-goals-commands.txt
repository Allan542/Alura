mvn compile - serve para compilar o programa
mvn clean - limpa o target com os arquivos compilados, para que caso haja mudança, eles sejam recompilados.
Ele também limpará as annotations que existem neste target, fazendo com que algumas delas possam não funcionar.
mvn test - faz os testes do projeto. Também, testa se as dependencies foram baixadas com sucesso.
mvn "goal" "goal" - executa um goal e depois o outro (Obs: pode ser mais de 2)
mvn package - Empacota o projeto, gerando o artifact da build, neste caso, um jar na pasta target
mvn install - vai fazer o "mvn clean compile test package", ou seja, depende dos comandos anteriores, gera um jar
e "instala" ele no repositório local que fica na pasta .m2 do usuário.
mvn deploy - o mesmo que acima, porém, manda para um repositório remoto que precisa estar configurado nom pom.xml
mvn build (exclusivo do eclipse, na seção de run as): ele faz o build do projeto de acordo com os goals inseridos
mvn validate - checa se toda a informação necessária para o build está disponível
mvn help:describe -Dcmd=PHASENAME(Goal) - Lista todos os vínculos de um goal para uma fase específica e seus plugins

Só para IntelliJ
mvn idea:idea - gera os arquivos necessários para as configurações de projeto em um IntelliJ
mvn idea:clean - limpa as configurações de projeto, possibilitando recarregá-las de novo pela opção que aparece no próprio
IntelliJ, sem que necessite de executar o comando "mvn idea:idea" novamente e invalidar o cache e reiniciar a IDE
(Só bastou uma vez e parou o problema que aparece de IllegalStatementException ou no Exception do JUnit).

Plugins externos
mvn jetty:run (prefixo-do-plugin:goal do próprio plugin que não existe no maven) - Pode adicionar o jetty diretamente pelo maven sem a necessidade de ter um tomcat
instalado externamente. Falha se este plugin não estiver no pom.xml